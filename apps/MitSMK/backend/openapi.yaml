openapi: 3.0.3
info:
  title: MitSMK API
  description: API for MitSMK - Art search and collection management
  version: 1.0.0
  contact:
    name: MitSMK Team
    email: support@mitsmk.dk

servers:
  - url: http://localhost:8000/api
    description: Development server

paths:
  /health:
    get:
      summary: Health check
      description: Check if the API is running
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
        '409':
          description: Username or email already exists

  /auth/login:
    post:
      summary: Login user
      description: Authenticate user and return access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /artworks/search:
    get:
      summary: Search artworks
      description: Search for artworks using SMK API
      tags:
        - Artworks
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            example: "Amager"
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          description: Number of results to return
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtworkSearchResponse'
        '400':
          description: Invalid search parameters

  /artworks/{object_number}:
    get:
      summary: Get artwork details
      description: Get detailed information about a specific artwork
      tags:
        - Artworks
      parameters:
        - name: object_number
          in: path
          required: true
          description: SMK object number
          schema:
            type: string
            example: "KMS1"
      responses:
        '200':
          description: Artwork details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artwork'
        '404':
          description: Artwork not found

  /collections:
    get:
      summary: Get user collections
      description: Get all collections for the authenticated user
      tags:
        - Collections
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        '401':
          description: Unauthorized

    post:
      summary: Create collection
      description: Create a new collection for the authenticated user
      tags:
        - Collections
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreate'
      responses:
        '201':
          description: Collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized

  /collections/{collection_id}:
    get:
      summary: Get collection details
      description: Get details of a specific collection including artworks
      tags:
        - Collections
      security:
        - bearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDetails'
        '401':
          description: Unauthorized
        '404':
          description: Collection not found

    put:
      summary: Update collection
      description: Update collection details
      tags:
        - Collections
      security:
        - bearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionUpdate'
      responses:
        '200':
          description: Collection updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '404':
          description: Collection not found

    delete:
      summary: Delete collection
      description: Delete a collection
      tags:
        - Collections
      security:
        - bearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Collection deleted
        '401':
          description: Unauthorized
        '404':
          description: Collection not found

  /collections/{collection_id}/artworks:
    post:
      summary: Add artwork to collection
      description: Add an artwork to a collection with optional note
      tags:
        - Collections
      security:
        - bearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionItemCreate'
      responses:
        '201':
          description: Artwork added to collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionItem'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '404':
          description: Collection or artwork not found

  /collections/{collection_id}/artworks/{artwork_id}:
    delete:
      summary: Remove artwork from collection
      description: Remove an artwork from a collection
      tags:
        - Collections
      security:
        - bearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
            format: uuid
        - name: artwork_id
          in: path
          required: true
          description: Artwork ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Artwork removed from collection
        '401':
          description: Unauthorized
        '404':
          description: Collection or artwork not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "kunstelsker123"
        email:
          type: string
          format: email
          example: "bruger@example.com"
        password:
          type: string
          minLength: 8
          example: "securepassword123"

    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "kunstelsker123"
        password:
          type: string
          example: "securepassword123"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: "kunstelsker123"
        email:
          type: string
          format: email
          example: "bruger@example.com"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        token_type:
          type: string
          example: "bearer"
        user:
          $ref: '#/components/schemas/User'

    Artwork:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "456e7890-e89b-12d3-a456-426614174001"
        object_number:
          type: string
          example: "KMS1"
        title:
          type: string
          example: "Amager"
        year:
          type: string
          example: "1920"
        artist_name:
          type: string
          example: "Jens Ferdinand Willumsen"
        image_thumbnail:
          type: string
          format: uri
          example: "https://api.smk.dk/api/v1/images/thumbnail/..."
        image_iiif_id:
          type: string
          format: uri
          example: "https://api.smk.dk/api/v1/images/iiif/..."
        public_domain:
          type: boolean
          example: true
        object_names:
          type: array
          items:
            type: string
          example: ["maleri"]
        has_image:
          type: boolean
          example: true

    ArtworkSearchResponse:
      type: object
      properties:
        artworks:
          type: array
          items:
            $ref: '#/components/schemas/Artwork'
        total:
          type: integer
          example: 42
        offset:
          type: integer
          example: 0
        limit:
          type: integer
          example: 20

    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "789e0123-e89b-12d3-a456-426614174002"
        name:
          type: string
          example: "Amagerkana"
        description:
          type: string
          example: "Samling af Amager-relaterede kunstværker"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T11:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T11:00:00Z"

    CollectionCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Amagerkana"
        description:
          type: string
          maxLength: 500
          example: "Samling af Amager-relaterede kunstværker"

    CollectionUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Amagerkana"
        description:
          type: string
          maxLength: 500
          example: "Samling af Amager-relaterede kunstværker"

    CollectionDetails:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            artworks:
              type: array
              items:
                $ref: '#/components/schemas/CollectionItem'

    CollectionItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "012e3456-e89b-12d3-a456-426614174003"
        artwork:
          $ref: '#/components/schemas/Artwork'
        note:
          type: string
          example: "Fantastisk maleri af Amager"
        added_at:
          type: string
          format: date-time
          example: "2024-01-15T11:15:00Z"

    CollectionItemCreate:
      type: object
      required:
        - artwork_id
      properties:
        artwork_id:
          type: string
          format: uuid
          example: "456e7890-e89b-12d3-a456-426614174001"
        note:
          type: string
          maxLength: 1000
          example: "Fantastisk maleri af Amager"

    Error:
      type: object
      properties:
        detail:
          type: string
          example: "Error message"

